### WARNING ### WARNING ### WARNING ### WARNING ### WARNING ###
### Files generated by Puppet, please do not edit manually
### WARNING ### WARNING ### WARNING ### WARNING ### WARNING ###



case ${OSTYPE} in
    *netbsd*)
	FLAG=1
	;;
    *freebsd*)
	FLAG=2
	;;
    *openbsd*)
	FLAG=3
	;;
    *linux-gnu*)
	FLAG=4
	;;
    *solaris*)
	FLAG=5
	;;
    *darwin*)
	FLAG=6
	;;
esac

autoload colors && colors
autoload compinit && compinit
autoload zmv




######################################################################
###
### zshparam - zsh parameters
###
######################################################################

# The file to save the history in when an interactive shell exits.  If
# unset, the history is not saved.
HISTFILE="${HOME}/.history"

# The maximum  number of events  stored in the internal  history list.
# If  you use  the HIST_EXPIRE_DUPS_FIRST  option, setting  this value
# larger  than the SAVEHIST  size will  give you  the difference  as a
# cushion for saving duplicated history events.
HISTSIZE='4096'

# The  interval in  seconds between  checks for  login/logout activity
# using the watch parameter.
LOGCHECK='5'

# The interval in seconds between checks for new mail.
MAILCHECK='0'

# The primary prompt  string, printed before a command is  read.  It undergoes a
# special  form of  expansion before  being displayed;  see EXPANSION  OF PROMPT
# SEQUENCES in zshmisc(1).  The default is `%m%# '.
PROMPT="%{$fg[red]%}%m%{$reset_color%}:%~# "

# The primary  prompt string,  printed before a  command is  read.  It
# undergoes a  special form of  expansion before being  displayed; see
# EXPANSION OF  PROMPT SEQUENCES in zshmisc(1).  The  default is `%m%#
# '.
#PS1=''

# The secondary prompt, printed  when the shell needs more information
# to complete a command.  It is  expanded in the same way as PS1.  The
# default is `%_> ', which  displays any shell constructs or quotation
# marks which are currently being processed.
#PS2=''

# Selection prompt used  within a select loop.  It  is expanded in the
# same way as PS1.  The default is `?# '.
#PS3=''

# The execution  trace prompt.  Default is `+%N:%i>  ', which displays
# the name of  the current shell structure and  the line number within
# it.  In sh or ksh emulation, the default is `+ '.
#PS4=''

# This prompt is  displayed on the right-hand side  of the screen when
# the primary  prompt is being displayed  on the left.   This does not
# work if the SINGLELINEZLE option is set.  It is expanded in the same
# way as PS1.
#RPS1=''

# This prompt is  displayed on the right-hand side  of the screen when
# the secondary prompt is being  displayed on the left.  This does not
# work if the SINGLELINEZLE option is set.  It is expanded in the same
# way as PS2.
#RPS2=''

# The maximum number of history events to save in the history file.
SAVEHIST='4096'

# The prompt used for  spelling correction.  The sequence `%R' expands
# to the  string which presumably needs spelling  correction, and `%r'
# expands to  the proposed correction.   All other prompt  escapes are
# also allowed.
#SPROMPT=''

# An array  (colon-separated list)  of login/logout events  to report.
# If it contains  the single word `all', then  all login/logout events
# are  reported. If  it contains  the  single word  `notme', then  all
# events are  reported as  with `all' except  $USERNAME.  An  entry in
# this list  may consist of  a username, an  `@' followed by  a remote
# hostname, and a  `%' followed by a line (tty).  Any  or all of these
# components  may be  present in  an  entry; if  a login/logout  event
# matches all of them, it is reported.
WATCH='notme'

# The format  of login/logout reports  if the watch parameter  is set.
# Default is `%n has %a %l from %m'.
WATCHFMT="${fg[cyan]}%n${reset_color} has %a ${fg[green]}%l${reset_color} from %m at %T"

# Others things not in the man !

# Don't ask me  'do you wish to see all  XX possibilities' before menu
# selection
LISTPROMPT=''




######################################################################
###
### zshoptions - zsh options
###
######################################################################

######################################################################
##
## Changing Directories
##
######################################################################

# If a command  is issued that can't be executed  as a normal command,
# and the command  is the name of a directory,  perform the cd command
# to that directory.
setopt AUTO_CD

# Make cd push the old directory onto the directory stack.
setopt AUTO_PUSHD

# If the argument  to a cd command (or an implied  cd with the AUTO_CD
# option set) is not a directory, and does not begin with a slash, try
# to expand  the expression as if it  were preceded by a  `~' (see the
# section `Filename Expansion').
unsetopt CDABLE_VARS

# Don't push multiple copies of  the same directory onto the directory
# stack.
setopt PUSHD_IGNORE_DUPS

# Have pushd with no arguments act like `pushd $HOME'.
setopt PUSHD_TO_HOME

######################################################################
##
## Completion
##
######################################################################

# If unset, key  functions that list completions try  to return to the
# last prompt if given a  numeric argument. If set these functions try
# to return to the last prompt if given no numeric argument.
setopt ALWAYS_LAST_PROMPT

# If a  completion is performed with  the cursor within a  word, and a
# full completion is  inserted, the cursor is moved to  the end of the
# word.  That is, the cursor is moved to the end of the word if either
# a single match is inserted or menu completion is performed.
setopt ALWAYS_TO_END

# Automatically list choices on an ambiguous completion.
setopt AUTO_LIST

# Automatically  use  menu  completion  after the  second  consecutive
# request  for  completion,  for  example  by  pressing  the  tab  key
# repeatedly. This option is overridden by MENU_COMPLETE.
setopt AUTO_MENU

# If  a  parameter  is  completed  whose  content is  the  name  of  a
# directory, then add a trailing slash instead of a space.
setopt AUTO_PARAM_SLASH

# Prevents  aliases   on  the  command  line   from  being  internally
# substituted before  completion is attempted.  The effect  is to make
# the alias a distinct command for completion purposes.
setopt COMPLETE_ALIASES

# If unset, the cursor is set to  the end of the word if completion is
# started. Otherwise it  stays there and completion is  done from both
# ends.
setopt COMPLETE_IN_WORD

# Whenever  a command completion  is attempted,  make sure  the entire
# command  path is  hashed  first.  This  makes  the first  completion
# slower.
setopt HASH_LIST_ALL

# This option works when AUTO_LIST  or BASH_AUTO_LIST is also set.  If
# there is an  unambiguous prefix to insert on  the command line, that
# is done without  a completion list being displayed;  in other words,
# auto-listing  behaviour  only  takes  place when  nothing  would  be
# inserted.  In the  case of BASH_AUTO_LIST, this means  that the list
# will be delayed to the third call of the function.
setopt LIST_AMBIGUOUS

# Beep on  an ambiguous completion.  More accurately,  this forces the
# completion widgets to return status  1 on an ambiguous com- pletion,
# which causes the shell to beep  if the option BEEP is also set; this
# may be modified if completion is called from a user-defined widget.
unsetopt LIST_BEEP

# When listing files  that are possible completions, show  the type of
# each file with a trailing identifying mark.
setopt LIST_TYPES

######################################################################
##
## Expansion and Globbing
##
######################################################################

# Nothing !

######################################################################
##
## History
##
######################################################################

# If this is  set, zsh sessions will append their  history list to the
# history file,  rather than replace  it. Thus, multiple  parallel zsh
# sessions  will all  have the  new entries  from their  history lists
# added to  the history file, in  the order that they  exit.  The file
# will still be periodically re-written  to trim it when the number of
# lines grows  20% beyond the  value specified by $SAVEHIST  (see also
# the HIST_SAVE_BY_COPY option).
setopt APPEND_HISTORY

# Save each  command's beginning timestamp (in seconds  since the epoch)
# and the duration (in seconds) to the history file.
#setopt EXTENDED_HISTORY

# Beep when an  attempt is made to access a  history entry which isn't
# there.
unsetopt HIST_BEEP

# When  searching for  history  entries  in the  line  editor, do  not
# display  duplicates  of  a   line  previously  found,  even  if  the
# duplicates are not contiguous.
setopt HIST_FIND_NO_DUPS

# Do  not  enter command  lines  into the  history  list  if they  are
# duplicates of the previous event.
setopt HIST_IGNORE_DUPS

# Remove  superfluous blanks from each command line being added to
# the history list.
setopt HIST_REDUCE_BLANKS

# This options works like APPEND_HISTORY except that new history lines
# are  added to  the  $HISTFILE  incrementally (as  soon  as they  are
# entered), rather than waiting until  the shell exits.  The file will
# still be periodically re-written to trim it when the number of lines
# grows  20% beyond  the value  specified by  $SAVEHIST (see  also the
# HIST_SAVE_BY_COPY option).
setopt INC_APPEND_HISTORY

######################################################################
##
## Initialisation
##
######################################################################

# All parameters subsequently defined are automatically exported.
unsetopt ALL_EXPORT

# If  this   option  is   unset,  the  startup   files  /etc/zprofile,
# /etc/zshrc, /etc/zlogin and /etc/zlogout will not be run.  It can be
# disabled and re-enabled at  any time, including inside local startup
# files (.zshrc, etc.).
unsetopt GLOBAL_RCS

######################################################################
##
## Input/Output
##
######################################################################

# Expand aliases.
setopt ALIASES

# Try  to correct  the  spelling  of commands.   Note  that, when  the
# HASH_LIST_ALL option is not set or when some directories in the path
# are not readable, this may  falsely report spelling errors the first
# time some commands are used.
setopt CORRECT

# Try to correct the spelling of all arguments in a line.
setopt CORRECT_ALL

# Allow comments even in interactive shells.
setopt INTERACTIVE_COMMENTS

# Note the  location of  each command the  first time it  is executed.
# Subsequent  invocations  of the  same  command  will  use the  saved
# location, avoiding a path search.   If this option is unset, no path
# hashing  is done  at all.   However, when  CORRECT is  set, commands
# whose names  do not appear in  the functions or  aliases hash tables
# are hashed in order to avoid reporting them as spelling errors.
setopt HASH_CMDS

# Whenever a command name is hashed, hash the directory containing it,
# as well as  all directories that occur earlier in  the path.  Has no
# effect if neither HASH_CMDS nor CORRECT is set.
setopt HASH_DIRS

# Print a warning  message if a mail file has  been accessed since the
# shell last checked.
unsetopt MAIL_WARNING

# Do not query the user before executing `rm *' or `rm path/*'.
setopt RM_STAR_SILENT

######################################################################
##
## Job Control
##
######################################################################

# With this  option set,  stopped jobs that  are removed from  the job
# table with the disown builtin  command are automatically sent a CONT
# signal to make them running.
setopt AUTO_CONTINUE

# Treat single word simple  commands without redirection as candidates
# for resumption of an existing job.
setopt AUTO_RESUME

# Run all background jobs at a  lower priority.  This option is set by
# default.
unsetopt BG_NICE

# Send the HUP signal to running jobs when the shell exits.
unsetopt HUP

# List jobs in the long format by default.
setopt LONG_LIST_JOBS

######################################################################
##
## Prompting
##
######################################################################

# Remove any right prompt from  display when accepting a command line.
# This may be useful with terminals with other cut/paste methods.
setopt TRANSIENT_RPROMPT

######################################################################
##
## Scripts and Functions
##
######################################################################

# Output  hexadecimal numbers in  the standard  C format,  for example
# `0xFF' instead of the usual  `16#FF'.  If the option OCTAL_ZEROES is
# also  set (it  is not  by default),  octal numbers  will  be treated
# similarly and hence appear as  `077' instead of `8#77'.  This option
# has no effect on the choice of the output base, nor on the output of
# bases  other than hexadecimal  and octal.   Note that  these formats
# will be understood on input irrespective of the setting of C_BASES.
setopt C_BASES

# When  executing  a shell  function  or  sourcing  a script,  set  $0
# temporarily to the name of the function/script.
setopt FUNCTION_ARGZERO

######################################################################
##
## Shell Emulation
##
######################################################################

# Make the echo builtin compatible with the BSD echo(1) command.  This
# disables backslashed escape sequences  in echo strings unless the -e
# option is specified.
setopt BSD_ECHO

######################################################################
##
## Shell State
##
######################################################################

# Nothing !

######################################################################
##
## Zle
##
######################################################################

# Nothing !

######################################################################
###
### zshbuiltins - zsh built-in commands
###
######################################################################

# For each name with a  corresponding value, define an alias with that
# value.  A trailing space in value causes the next word to be checked
# for alias  expansion.  If  the -g flag  is present, define  a global
# alias;  global aliases are  expanded even  if they  do not  occur in
# command position.
alias c='clear'
alias cp='nocorrect cp'
alias df="df -h"
alias du='du -h'
alias grepgit='grep --exclude-dir=.git'
alias grepsvn='grep --exclude-dir=.svn'
alias h='history'
alias j='jobs'
alias mkdir='nocorrect mkdir'
alias mv='nocorrect mv'
alias rh='rehash'
alias reload=". ${HOME}/.zshrc"
alias rm='nocorrect rm'
alias touch='nocorrect touch'
alias z='zlock'

if [ ${FLAG} -eq 1 ] || [ ${FLAG} -eq 3 ]
then
    alias ls='ls -h'
fi

if [ ${FLAG} -eq 2 ]
then
    alias ls='ls -G -h -w'
fi

if [ ${FLAG} -eq 4 ]
then
    alias ls='ls -h --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    if [ ! -f "${HOME}/.my.cnf" ] && [ -f '/etc/mysql/debian.cnf' ]
    then
	alias mysql='mysql --defaults-extra-file=/etc/mysql/debian.cnf'
    fi
fi

if [ ${FLAG} -eq 2 ] || [ ${FLAG} -eq 4 ]
then
    alias cp="nocorrect cp -v"
    alias mkdir='nocorrect mkdir -v'
    alias mv="nocorrect mv -v"
    alias rm="nocorrect rm -v"
fi

bindkey -e
bindkey '^b' backward-word
bindkey '^f' forward-word
bindkey ';5C' forward-word
bindkey ';5D' backward-word

# The  specified  names  are   marked  for  automatic  export  to  the
# environment  of  subsequently   executed  commands.   Equivalent  to
# typeset -gx.  If a parameter specified does not already exist, it is
# created in the global scope.

if [ ${FLAG} -eq 3 ] || [ ${FLAG} -eq 4 ]
then
    export TERM='xterm-color'
else
    export TERM='xterm'
fi

if [ -d '/usr/local/mysql' ]
then
    export PATH='/usr/local/mysql/sbin:/usr/local/mysql/bin'
    export MANPATH='/usr/local/mysql/share/man:/usr/local/mysql/man'
fi

if [ -d '/usr/site' ] && [ ! -h '/usr/site' ]
then
    export PATH="${PATH}:/usr/site/sbin:/usr/site/bin"
    export MANPATH="${MANPATH}:/usr/site/share/man:/usr/site/man"
fi

if [ -d '/usr/netsoul' ] && [ ! -h '/usr/netsoul' ]
then
    export PATH="${PATH}:/usr/netsoul/sbin:/usr/netsoul/bin"
    export MANPATH="${MANPATH}:/usr/netsoul/share/man:/usr/netsoul/man"
fi

if [ -d '/usr/ypb' ] && [ ! -h '/usr/ypb' ]
then
    export PATH="${PATH}:/usr/ypb/sbin:/usr/ypb/bin"
    export MANPATH="${MANPATH}:/usr/ypb/share/man:/usr/ypb/man"
fi

if [ -d '/usr/heimdal' ] && [ ! -h '/usr/heimdal' ]
then
    export PATH="${PATH}:/usr/heimdal/sbin:/usr/heimdal/bin"
    export MANPATH="${MANPATH}:/usr/heimdal/share/man:/usr/heimdal/man"
fi

if [ -d '/usr/openafs' ] && [ ! -h '/usr/openafs' ]
then
    export PATH="${PATH}:/usr/openafs/sbin:/usr/openafs/bin"
    export MANPATH="${MANPATH}:/usr/openafs/share/man:/usr/openafs/man"
fi

if [ -d '/usr/arla' ] && [ ! -h '/usr/arla' ]
then
    export PATH="${PATH}:/usr/arla/sbin:/usr/arla/bin"
    export MANPATH="${MANPATH}:/usr/arla/share/man:/usr/arla/man"
fi

if [ -d '/usr/local' ] && [ ! -h '/usr/local' ]
then
    export PATH="${PATH}:/usr/local/sbin:/usr/local/bin"
    export MANPATH="${MANPATH}:/usr/local/share/man:/usr/local/man"
fi

if [ -d '/usr/X11R6' ] && [ ! -h '/usr/X11R6' ]
then
    export PATH="${PATH}:/usr/X11R6/sbin:/usr/X11R6/bin"
    export MANPATH="${MANPATH}:/usr/X11R6/share/man:/usr/X11R6/man"
fi

if [ -d '/usr/pkg' ] && [ ! -h '/usr/pkg' ]
then
    export PATH="${PATH}:/usr/pkg/sbin:/usr/pkg/bin"
    export MANPATH="${MANPATH}:/usr/pkg/share/man:/usr/pkg/man"
fi

if [ -d '/usr/opt' ] && [ ! -h '/usr/opt' ]
then
    export PATH="${PATH}:/usr/opt/sbin:/usr/opt/bin"
    export MANPATH="${MANPATH}:/usr/opt/share/man:/usr/opt/man"
fi

if [ -d '/usr/opt/local' ] && [ ! -h '/usr/opt/local' ]
then
    export PATH="${PATH}:/usr/opt/local/sbin:/usr/opt/local/bin"
    export MANPATH="${MANPATH}:/usr/opt/local/share/man:/usr/opt/local/man"
fi

export PATH="${PATH}:/usr/sbin:/usr/bin:/sbin:/bin"
export MANPATH="${MANPATH}:/usr/share/man:/usr/man"

export BLOCKSIZE='M'
export CLICOLOR='YES'
export DEBEMAIL="${CONF_USER}@${CONF_DOMAIN}"
export DEBFULLNAME="${CONF_GECOS}"
export EDITOR="${CONF_EDITOR}"
export EMAIL="${CONF_USER}@${CONF_DOMAIN}"
export LESS='-c'
export PAGER='less'
export SVN_EDITOR="${CONF_EDITOR}"

# Set  or display  resource  limits  of the  shell  and the  processes
# started by  the shell.  The  value of limit  can be a number  in the
# unit  specified below or  the value  `unlimited'.  By  default, only
# soft limits are manipulated.

if [ ${FLAG} -ne 6 ]
then
    ulimit -c 0
    ulimit -d unlimited
    ulimit -f unlimited
    ulimit -l unlimited
    ulimit -s unlimited
    ulimit -t unlimited
    ulimit -u unlimited
fi

if [ ${FLAG} -eq 4 ]
then
    ulimit -i unlimited
    ulimit -m unlimited
    ulimit -n unlimited
    ulimit -q unlimited
    ulimit -v unlimited
    ulimit -x unlimited
fi




######################################################################
###
### zshzle - zsh command line editor
###
######################################################################

# Nothing !




######################################################################
###
### zshcompsys - zsh completion system
###
######################################################################

# Nothing !




######################################################################
###
### zshcompctl - zsh programmable completion
###
######################################################################

compctl -K _complete_from_known_hosts sr
compctl -K _complete_from_known_hosts ssa
compctl -K _complete_from_known_hosts ssm
compctl -K _complete_from_known_hosts ssu
compctl -K _complete_from_known_hosts zsr
compctl -K _complete_from_known_hosts zsrx




######################################################################
###
### zshmodules - zsh loadable modules
###
######################################################################

# Nothing !




######################################################################
###
### zshcontrib - user contributions to zsh
###
######################################################################

# Nothing !




######################################################################
###
### Usefull (personnal) functions
###
######################################################################

# If  the parameter  PERIOD is  set, this  function is  executed every
# $PERIOD  seconds,  just before  a  prompt.   Note  that if  multiple
# functions are  defined using  the array periodic_functions  only one
# period  is  applied  to  the  complete set  of  functions,  and  the
# scheduled time  is not  reset if the  list of functions  is altered.
# Hence the set of functions is always called together.
PERIOD=3600
function periodic()
{
}

# Executed before each prompt.  Note that precommand functions are not
# re-executed simply because the  command line is redrawn, as happens,
# for example, when a notification about an exiting job is displayed.
function precmd()
{
    if [ ${TERM} = "rxvt" ] || [ ${TERM} = "screen" ]  || [ ${TERM} = "xterm" ] || [ ${TERM} = "xterm-color" ]
    then
	if [ ${FLAG} -eq 1 ] || [ ${FLAG} -eq 3 ] || [ ${FLAG} -eq 4 ]
	then
	    print -Pn "\e]0; %n@%M\a"
	fi
    fi
}

# Executed  just after  a command  has been  read and  is about  to be
# executed.  If the history mechanism  is active (and the line was not
# discarded from the  history buffer), the string that  the user typed
# is passed  as the first argument,  otherwise it is  an empty string.
# The  actual  command  that  will  be  executed  (including  expanded
# aliases) is passed in two  different forms: the second argument is a
# single-line, size-limited  version of the command  (with things like
# function bodies  elided); the third argument contains  the full text
# that is being executed.
function preexec()
{
    if [ ${TERM} = "rxvt" ] || [ ${TERM} = "screen" ] || [ ${TERM} = "xterm" ] || [ ${TERM} = "xterm-color" ]
    then
	if [ ${FLAG} -eq 1 ] || [ ${FLAG} -eq 3 ] || [ ${FLAG} -eq 4 ]
	then
	    print -Pn "\e]0; %n@%M\a"
	fi
    fi
}

# Remove scratch and unwanted files
function clean()
{
    SEARCH='.'
    if [ ${1} ]
    then
	SEARCH=${1}
    fi
    find ${SEARCH} \( -name "*~" -print -or -name ".*~" -print -or -name "#*" -print -or -name ".#*" -or -name "*.cfsaved" -or -name "*.pre_fcopy" -print \) -exec rm -fr {} \;
}

# Change user's home right
function cleanhome()
{
    find ${HOME} -type d -exec chmod 700 {} \;
    find ${HOME} -type f -exec chmod 600 {} \;
}

# Change root's home right
function cleanroot()
{
    find ${HOME} -type d -exec chmod 700 {} \;
    find ${HOME} -type f -exec chmod 600 {} \;
}

# Add setenv (from C Shell) in Bourne Shell
function setenv()
{
    typeset -x "${1}${1:+=}${(@)argv[2,$#]}"
}

# Add hosts completion from known_hosts
function _complete_from_known_hosts()
{
    if [ -f ${HOME}/.ssh/known_hosts ]
    then
	reply=(${${${${(f)"$(<${HOME}/.ssh/known_hosts)"}:#[0-9]*}%%\ *}%%,*})
    fi
}

# Use ssh -l ${USER} with protocol 2
function ssu()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [${USER}@]hostname"
    else
	ssh -2 -4 -A -C -k -l ${USER} -t -x "${@}"
    fi
}

# Use ssh -l admin with protocol 2 (usefull for Cisco)
function ssa()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [admin@]hostname"
    else
	ssh -2 -4 -l admin "${@}"
    fi
}

# Use ssh -l manager with protocol 1 (usefull for ProCurve)
function ssm()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [manager@]hostname"
    else
	ssh -1 -4 -l manager "${@}"
    fi
}

# Use ssh -l root with protocol 2
function sr()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [root@]hostname"
    else
	ssh -2 -4 -a -C -k -l root -t -x "${@}"
    fi
}

# Use ssh -l root with protocol 2 and execute zsh
function zsr()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [root@]hostname"
    else
	ssh -2 -4 -a -C -k -l root -t -x "${@}" 'uptime;uname -a;zsh'
    fi
}

# Use ssh -l root with protocol 2 and execute zsh with X11 forwarding
function zsrx()
{
    if [ ! ${1} ]
    then
	echo "usage: ${0} [root@]hostname"
    else
	ssh -2 -4 -a -C -k -l root -t -X "${@}" 'uptime;uname -a;zsh'
    fi
}

function svnadd()
{
    if [ ! ${1} ]
    then
        echo "usage: ${0} [options] [args]"
    else
	svn add "${@}"
	svn propset svn:keywords "Id" "${@}"
    fi
}

function svnid()
{
    if [ ! ${1} ]
    then
        echo "usage: ${0} [options] [args]"
    else
	svn propset svn:keywords "Id" "${@}"
    fi
}

# Apply Debian's / Ubuntu's updates
function vp-apt-update()
{
    apt-get update && \
        echo '-- apt-get upgrade' && \
        apt-get upgrade && \
	echo '-- apt-get dist-upgrade' && \
        apt-get dist-upgrade && \
        echo '-- aptitude full-upgrade' && \
        aptitude full-upgrade
}

# Clean Debian's / Ubuntu's packages files
function vp-apt-clean()
{
    apt-get autoremove
    apt-get autoclean
}

function vp-yum-update()
{
    if [ ${FLAG} -eq 4 ]
    then
	yum update-minimal && yum update && yum upgrade
    fi
}

# Apply puppet's updates
function vp-puppet-update()
{
    puppet agent --onetime --no-daemonize --verbose --no-splay
}

# Test puppet's updates
function vp-puppet-update-noop()
{
    puppet agent --onetime --no-daemonize --verbose --no-splay --noop --test
}




######################################################################
###
### Load our function and file.
###
######################################################################

if [ -f ${HOME}/.myzshrc ]
then
    . ${HOME}/.myzshrc
fi
# EOF
